import cv2
import time
import os
import sys
import argparse

# === 0. COMMAND LINE ARGUMENTS SETUP ===
parser = argparse.ArgumentParser(description="Export an image as compressed SVG, BMP, and PNG formats.")
parser.add_argument("-i", "--input", required=True, help="Path to the input image file (e.g. ebs.jpg)")
parser.add_argument("-o", "--output", default="output", help="Output directory name (default: output)")
args = parser.parse_args()

input_file = args.input
output_dir = args.output

# === 1. FILE AND DIRECTORY VALIDATION ===
if not os.path.exists(input_file):
    print(f"‚ùå Input image not found: {input_file}")
    sys.exit(1)

os.makedirs(output_dir, exist_ok=True)

# === 2. LOAD IMAGE AND HANDLE ALPHA CHANNEL IF EXISTS ===
image = cv2.imread(input_file)
if image is None:
    print(f"‚ùå Failed to load image: {input_file}")
    sys.exit(1)

# If image has 4 channels (BGRA), convert to BGR
if image.shape[2] == 4:
    image = cv2.cvtColor(image, cv2.COLOR_BGRA2BGR)

height, width = image.shape[:2]
total_pixels = height * width
processed_pixels = 0
start_time = time.time()

# === 3. GENERATE COMPRESSED SVG (WITH RUN-LENGTH ENCODING BY ROWS) ===
svg_path = os.path.join(output_dir, "output_compressed.svg")
with open(svg_path, "w") as f:
    f.write(f'<!-- Generated by Python OpenCV script -->\n')
    f.write(f'<svg xmlns="http://www.w3.org/2000/svg" width="{width}" height="{height}">\n')

    for y in range(height):
        x = 0
        while x < width:
            b, g, r = image[y, x]
            hex_color = f'#{r:02x}{g:02x}{b:02x}'
            run_length = 1

            while x + run_length < width:
                b2, g2, r2 = image[y, x + run_length]
                if (b2, g2, r2) != (b, g, r):
                    break
                run_length += 1

            f.write(f'<rect x="{x}" y="{y}" width="{run_length}" height="1" fill="{hex_color}" />\n')
            x += run_length

        processed_pixels += width
        if processed_pixels % 10000 == 0 or processed_pixels == total_pixels:
            elapsed = time.time() - start_time
            print(f"SVG: {processed_pixels} / {total_pixels} ({processed_pixels * 100 / total_pixels:.2f}%) - {elapsed:.2f}s")

    f.write('</svg>\n')

print(f"‚úÖ SVG file created: {svg_path}")

# === 4. SAVE AS BMP AND PNG FORMATS ===
bmp_path = os.path.join(output_dir, "output_bitmap.bmp")
cv2.imwrite(bmp_path, image)
print(f"‚úÖ BMP file created: {bmp_path}")

png_path = os.path.join(output_dir, "output_compressed.png")
cv2.imwrite(png_path, image)
print(f"‚úÖ PNG file created: {png_path}")

# === 5. SUMMARY INFORMATION ===
print(f"\nüöÄ All tasks completed successfully!")
print(f"üìè Image size: {width}x{height}")
print(f"üïí Total processing time: {time.time() - start_time:.2f} seconds")
print(f"üìÅ Output directory: {output_dir}")
